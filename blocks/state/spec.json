{
  "nio/AppendState": {
    "version": "0.1.1",
    "description": "Maintains a state and when state changes, a signal is notified that contains the `state` and `prev_state`.",
    "categories": [
      "Signal Modifier"
    ],
    "properties": {
      "backup_interval": {
        "title": "Backup Interval",
        "type": "TimeDeltaType",
        "description": "Interval at which state is saved to disk.",
        "default": {
          "seconds": 3600
        }
      },
      "group_by": {
        "title": "Group By",
        "type": "Type",
        "description": "What to group the signals by. A different state will be maintained for each group",
        "default": null
      },
      "initial_state": {
        "title": "Initial State",
        "type": "Type",
        "description": "The state when none has been set by an incoming signal. If the `initial_state` is a python expression, it is evaluated at configuration. For example, if the `initial_state` is configured as `{{ datetime.datetime.utctime() }}`, the value of `initial_state` will the be time at configuration.",
        "default": "{{ None }}"
      },
      "load_from_persistence": {
        "title": "Load from Persistence?",
        "type": "BoolType",
        "description": "Upon restart, block will load the previous state and resume operation as if restart did not happen.",
        "default": true
      },
      "state_expr": {
        "title": "State",
        "type": "Type",
        "description": "Property that evaluates to state. If the expression cannot be evaluated, the state will not change.",
        "default": "{{ $state }}"
      },
      "state_name": {
        "title": "State Name",
        "type": "StringType",
        "description": "String property that is the name of the appended state",
        "default": "state"
      }
    },
    "inputs": {
      "getter": {
        "description": "Any list of signals. Signals that get assigned a state and/or pass through the block."
      },
      "setter": {
        "description": "Signals passed to this input set the state of the block. Each signal is evaluated against `state_expr` to determine the new state of the block for the signal's group."
      }
    },
    "outputs": {
      "default": {
        "description": "Non state setting signals are passed through with state set to the attribute `state_name`."
      }
    },
    "commands": {
      "current_state": {
        "params": {
          "group": {
            "allow_none": true,
            "title": "group",
            "default": null
          }
        },
        "description": "Get the current state of the block is applying to the signals"
      },
      "groups": {
        "params": {},
        "description": "Display the current groupings of signals."
      }
    }
  },
  "nio/StateChange": {
    "version": "0.1.1",
    "description": "Maintains a state and when state changes, a signal is notified that contains the `state` and `prev_state`.",
    "categories": [
      "Signal Flow"
    ],
    "properties": {
      "backup_interval": {
        "title": "Backup Interval",
        "type": "TimeDeltaType",
        "description": "Interval at which state is saved to disk.",
        "default": {
          "seconds": 3600
        }
      },
      "exclude": {
        "title": "Exclude Existing Fields",
        "type": "BoolType",
        "description": "Select whether you want to exclude other signals. If checked, the only output will be `state` and `prev_state`. If not checked, `state` and `prev_state` will be appended onto the incoming signal.",
        "default": true
      },
      "group_by": {
        "title": "Group By",
        "type": "Type",
        "description": "What to group the signals by. A different state will be maintained for each group",
        "default": null
      },
      "initial_state": {
        "title": "Initial State",
        "type": "Type",
        "description": "The state when none has been set by an incoming signal. If the `initial_state` is a python expression, it is evaluated at configuration. For example, if the `initial_state` is configured as `{{ datetime.datetime.utctime() }}`, the value of `initial_state` will the be time at configuration.",
        "default": "{{ None }}"
      },
      "load_from_persistence": {
        "title": "Load from Persistence?",
        "type": "BoolType",
        "description": "Upon restart, block will load the previous state and resume operation as if restart did not happen.",
        "default": true
      },
      "state_expr": {
        "title": "State",
        "type": "Type",
        "description": "Property that evaluates to state. If the expression cannot be evaluated, the state will not change.",
        "default": "{{ $state }}"
      },
      "state_name": {
        "title": "State Name",
        "type": "StringType",
        "description": "String property that is the name of the appended state",
        "default": "state"
      }
    },
    "inputs": {
      "default": {
        "description": "Signal with attribute to be set and watched as state."
      }
    },
    "outputs": {
      "default": {
        "description": "When state changes, a signal is notified with attributes `state`, `prev_state`, and `group`. If `exclude` is _unchecked_ then the signal that changed the state will have the attributes added to it."
      }
    },
    "commands": {
      "current_state": {
        "params": {
          "group": {
            "allow_none": true,
            "title": "group",
            "default": null
          }
        },
        "description": "Get the current state of the block is applying to the signals"
      },
      "groups": {
        "params": {},
        "description": "Display the current groupings of signals."
      }
    }
  },
  "nio/Switch": {
    "version": "0.1.1",
    "description": "getter signals pass through to the *true* output if the last *setter* signal set the state to `True`. Else, the signals to getter pass through to the false output.",
    "categories": [
      "Signal Flow"
    ],
    "properties": {
      "backup_interval": {
        "title": "Backup Interval",
        "type": "TimeDeltaType",
        "description": "Interval at which state is saved to disk.",
        "default": {
          "seconds": 3600
        }
      },
      "group_by": {
        "title": "Group By",
        "type": "Type",
        "description": "What to group the signals by. A different state will be maintained for each group",
        "default": null
      },
      "initial_state": {
        "title": "Initial State",
        "type": "Type",
        "description": "The state when none has been set by an incoming signal. If the `initial_state` is a python expression, it is evaluated at configuration. For example, if the `initial_state` is configured as `{{ datetime.datetime.utctime() }}`, the value of `initial_state` will the be time at configuration.",
        "default": "{{ None }}"
      },
      "load_from_persistence": {
        "title": "Load from Persistence?",
        "type": "BoolType",
        "description": "Upon restart, block will load the previous state and resume operation as if restart did not happen.",
        "default": true
      },
      "state_expr": {
        "title": "State",
        "type": "Type",
        "description": "Property that evaluates to state. If the expression cannot be evaluated, the state will not change.",
        "default": "{{ $state }}"
      }
    },
    "inputs": {
      "getter": {
        "description": "Any list of signals. Signals that get assigned a state and/or pass through the block."
      },
      "setter": {
        "description": "Signals passed to this input set the state of the block. Each signal is evaluated against `state_expr` to determine the new state of the block for the signal's group."
      }
    },
    "outputs": {
      "false": {
        "description": "getter signals pass through to the false output by default until state is changed to `True`."
      },
      "true": {
        "description": "getter signals pass through to the true output if the last setter signal set the state to `True`"
      }
    },
    "commands": {
      "current_state": {
        "params": {
          "group": {
            "allow_none": true,
            "title": "group",
            "default": null
          }
        },
        "description": "Get the current state of the block is applying to the signals"
      },
      "groups": {
        "params": {},
        "description": "Display the current groupings of signals."
      }
    }
  }
}
